{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FellegiSunterEM","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNgzvrm/iokbfLNzzvSwYIZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"eC6H3OziLe_Q","executionInfo":{"status":"ok","timestamp":1618412631443,"user_tz":-330,"elapsed":1333,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}}},"source":["import os\n","from tqdm.notebook import tqdm"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"KB-hu8pOLsLA","executionInfo":{"status":"ok","timestamp":1618412775721,"user_tz":-330,"elapsed":1153,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}}},"source":["import numpy as np\n","import pandas as pd"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"f6fbNNElLyx9","executionInfo":{"status":"ok","timestamp":1618412792434,"user_tz":-330,"elapsed":1272,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}}},"source":["matrixA = np.round(np.random.normal(0.0,1.1,size=(100,10)),0)\n","matrixB = np.vstack((matrixA[0:20,],np.round(np.random.normal(0.0,1.1,size=(80,10)),0)))"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lnvWqMX7NPiF","executionInfo":{"status":"ok","timestamp":1618412779784,"user_tz":-330,"elapsed":801,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}},"outputId":"a056181c-2ae0-4aa6-a884-257df06875fb"},"source":["print(\"Source Shape: \", matrixA.shape)\n","print(\"Target Shape: \", matrixB.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Source Shape:  (100, 10)\n","Target Shape:  (100, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fClqUMSBNPYj","executionInfo":{"status":"ok","timestamp":1618412782576,"user_tz":-330,"elapsed":1494,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}}},"source":["matrixA = 1.0*(matrixA > 1)\n","matrixB = 1.0*(matrixB > 1)"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"lYH3vUhrPClD"},"source":["dfA = pd.DataFrame(matrixA, index = ['A'+np.str(_idx) for _idx in list(range(1,matrixA.shape[0]+1))])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":158},"id":"6pGeQcoMQQFi","executionInfo":{"status":"ok","timestamp":1618170085608,"user_tz":-330,"elapsed":2006,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}},"outputId":"124c65c0-7ad6-4867-c124-5b4ba103ea11"},"source":["print(dfA.shape)\n","dfA.head(3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(100, 10)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>A1</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>A2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>A3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      0    1    2    3    4    5    6    7    8    9\n","A1  1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0\n","A2  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0\n","A3  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0"]},"metadata":{"tags":[]},"execution_count":112}]},{"cell_type":"code","metadata":{"id":"t04F7Yn8QXZO"},"source":["dfB = pd.DataFrame(matrixB, index = ['B'+np.str(_idx) for _idx in list(range(1,matrixB.shape[0]+1))])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":158},"id":"KkDrLyEIQXR4","executionInfo":{"status":"ok","timestamp":1618170090360,"user_tz":-330,"elapsed":2289,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}},"outputId":"923c17c0-a36a-486b-bc88-67ffbc238d5f"},"source":["print(dfB.shape)\n","dfB.tail(3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(100, 10)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>B98</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>B99</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>B100</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        0    1    2    3    4    5    6    7    8    9\n","B98   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","B99   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","B100  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0"]},"metadata":{"tags":[]},"execution_count":114}]},{"cell_type":"code","metadata":{"id":"nziXVWjQZrON"},"source":["def check_if_valid(df, valid_arr= [0,1]):\n","  arr = df.to_numpy()\n","  return arr.all() in list(valid_arr)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Arngn51USDf-"},"source":["is_frame_a_valid = check_if_valid(dfA)\n","is_frame_b_valid = check_if_valid(dfB)\n","if not (is_frame_a_valid and is_frame_b_valid):\n","  raise ValueError(\"Only 0,1 matrices are supported\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sKt2dhtQaUiI"},"source":["#np.apply_along_axis(lambda row: row - a[0] ,axis =1, arr=a )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LVpFqrd9hT7b"},"source":["def calc_agreement(dfA, dfB):\n","  nA,k = dfA.shape\n","  nB = dfB.shape[0]\n","  N = nA * nB\n","\n","  res = np.zeros((N,k))\n","\n","  for idx in range(nB):\n","    # subracting as matrices instead of an inside loop\n","    start  = idx*nA\n","    end = idx*nA + (nA-1)\n","    res[start:end+1,:] =  1 - np.abs(np.apply_along_axis(lambda row: row - dfB[idx,:] ,axis =1, arr=dfA ))\n","  \n","  return res"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lZX9ZmZunmfS"},"source":["def e_step(agree_matrix, p, m, u):\n","  n,k = agree_matrix.shape\n","  res = np.zeros((n,2))\n","\n","  disagree_matrix = 1 - agree_matrix\n","\n","  v1_exp_term = np.log(p) + np.dot(agree_matrix,np.log(m)) + np.dot(disagree_matrix,np.log(1.0-m))\n","  v2_exp_term = np.log(1.0-p) + np.dot(agree_matrix,np.log(u)) + np.dot(disagree_matrix,np.log(1.0-u))\n","\n","  v1 = np.exp(v1_exp_term)\n","  v2 = np.exp(v2_exp_term)\n","\n","  return {\"g_m\":v1/(v1+v2),\"g_u\":v2/(v1+v2)}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ILPcqFJeQtd8"},"source":["def em(dfA, dfB, tolerance=0.01, max_iter =1000, verbose=True):\n","  n1 = dfA.shape[0]\n","  dfA_indices = list(dfA.index)\n","\n","  n2 = dfB.shape[0]\n","  dfB_indices = list(dfB.index)\n","\n","  k = 0;\n","  if dfA.shape[1] == dfB.shape[1]:\n","    k = dfA.shape[1]\n","  else:\n","    raise ValueError(\"Shapes of frames must be the same\")\n","\n","  agree_matrix = calc_agreement(dfA.to_numpy(),dfB.to_numpy())\n","\n","  N = agree_matrix.shape[0]\n","  p = 0.5\n","  m = np.repeat(0.9,k)\n","  u = np.repeat(0.1,k)\n","\n","  conv_flag = -1\n","\n","  for i in range(max_iter):\n","    print(\"Iteration: \",i)\n","\n","    _p = p\n","    _m = m\n","    _u = u\n","\n","    expect = e_step(agree_matrix, p, m, u)\n","    g_m = expect.get(\"g_m\")\n","    g_u = expect.get(\"g_u\")\n","\n","    sigma_gm = np.sum(g_m)\n","    sigma_gu = np.sum(g_u)\n","\n","    p = sigma_gm/N\n","\n","    m = np.dot(g_m,agree_matrix/sigma_gm)\n","    u = np.dot(g_u,agree_matrix/sigma_gu)\n","\n","    if np.any(m > 0.99999):\n","      m[m > 0.99999] = 0.99999\n","    if np.any(m < 0.00001):\n","      m[m < 0.00001] = 0.00001 #1e-05\n","\n","    if np.any(u > 0.99999):\n","      u[u > 0.99999] = 0.99999\n","    if np.any(u < 0.00001):\n","      u[u < 0.00001] = 0.00001 #1e-05\n","    \n","    if np.any(p > 0.99999):\n","      p[p > 0.99999] = 0.99999\n","    if np.any(p < 0.00001):\n","      p[p < 0.00001] = 0.00001 #1e-05\n","\n","    if verbose:\n","      print(\"p :\", p)\n","      print(\"m :\", m)\n","      print(\"u :\", u)\n","\n","    covergence_flag = np.abs(_p - p) < tolerance and np.all(np.abs(_m-m) < tolerance) and np.all(np.abs(_u-u) < tolerance)\n","\n","    if np.any(np.isnan(covergence_flag)):\n","      p = _p\n","      m = _m\n","      u =_u\n","      conv_flag = 0\n","      break;\n","    \n","    if covergence_flag:\n","      conv_flag = 1\n","      break;\n","\n","    if i == max_iter:\n","      conv_flag = 2\n","\n","  print(\"Run completed.\")\n","\n","  return {\n","      \"agree-score\":m,\n","      \"disagree-score\":u,\n","      \"prob\":p,\n","      \"convergence-flag\": conv_flag\n","  }\n","\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blM16YaHjkq8","executionInfo":{"status":"ok","timestamp":1618177456341,"user_tz":-330,"elapsed":1018,"user":{"displayName":"asuran r","photoUrl":"","userId":"13400439017930522440"}},"outputId":"cc6a6b30-6f55-422a-80fa-7ccefe60dd36"},"source":["em(dfA, dfB)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Iteration:  0\n","p : 0.9942908641709087\n","m : [0.85470007 0.81472034 0.86447904 0.853974   0.82211172 0.8439009\n"," 0.83705638 0.83796314 0.87230794 0.88775241]\n","u : [0.52188767 0.33823121 0.29012918 0.6133077  0.41719545 0.51094419\n"," 0.65202277 0.38900943 0.39799065 0.7909942 ]\n","Iteration:  1\n","p : 0.9949089236325006\n","m : [0.85357529 0.81450499 0.86440224 0.8531508  0.82216171 0.84305752\n"," 0.8363025  0.83687532 0.87225966 0.88712496]\n","u : [0.70129186 0.32246941 0.23541143 0.74496104 0.35826989 0.6353367\n"," 0.77688385 0.54708947 0.34984457 0.90186483]\n","Iteration:  2\n","p : 0.9929803471234413\n","m : [0.85285577 0.81593306 0.86636515 0.85267302 0.82414855 0.84247429\n"," 0.83589325 0.83599992 0.87426323 0.88681928]\n","u : [0.84491153 0.25563994 0.13055246 0.84227022 0.20466613 0.77490779\n"," 0.85109987 0.75053666 0.20995316 0.94105609]\n","Iteration:  3\n","p : 0.9888422961771974\n","m : [0.85202535 0.81817472 0.87021777 0.85196834 0.82791825 0.84164939\n"," 0.83531157 0.83483671 0.87809898 0.88646852]\n","u : [0.92145274 0.2647706  0.06200728 0.90857995 0.10032667 0.87307282\n"," 0.89701134 0.8853213  0.11638471 0.95202694]\n","Iteration:  4\n","p : 0.9857845148249927\n","m : [0.85150361 0.81852392 0.87305169 0.85144659 0.83066139 0.84106562\n"," 0.83489457 0.83413435 0.88079957 0.88623989]\n","u : [0.94269895 0.35959345 0.039335   0.93258449 0.06660779 0.90679523\n"," 0.91265691 0.92316752 0.09295673 0.95377965]\n","Iteration:  5\n","p : 0.984397479493003\n","m : [0.85131124 0.81813934 0.87437965 0.85124784 0.83195133 0.84080344\n"," 0.83472108 0.83389658 0.88192675 0.88615799]\n","u : [0.94672905 0.42465579 0.02966682 0.93791108 0.05314584 0.91749386\n"," 0.91668994 0.93025381 0.091878   0.95294299]\n","Iteration:  6\n","p : 0.9839186144640047\n","m : [0.85126756 0.81789005 0.87488572 0.85120426 0.83245311 0.84070767\n"," 0.83466021 0.83384697 0.88221113 0.88614871]\n","u : [0.94656056 0.45162485 0.02385712 0.93799661 0.04563569 0.92106951\n"," 0.9179736  0.93041999 0.09800458 0.95152171]\n","Iteration:  7\n","p : 0.9837437625444265\n","m : [0.85126238 0.81778208 0.87510726 0.85120078 0.83268042 0.84067026\n"," 0.83463042 0.83384298 0.88222148 0.88615425]\n","u : [0.94584864 0.46209829 0.01960408 0.93727372 0.04034355 0.92246924\n"," 0.91887981 0.92962279 0.10581306 0.95048357]\n","Iteration:  8\n","p : 0.9836566628800567\n","m : [0.85126291 0.817735   0.8752384  0.85120288 0.83281877 0.84065108\n"," 0.83460978 0.83384443 0.8821637  0.886159  ]\n","u : [0.94531297 0.4668276  0.01627068 0.9366884  0.03623933 0.92318725\n"," 0.91967312 0.92902499 0.1134287  0.94985462]\n","Run completed.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'agree-score': array([0.85126291, 0.817735  , 0.8752384 , 0.85120288, 0.83281877,\n","        0.84065108, 0.83460978, 0.83384443, 0.8821637 , 0.886159  ]),\n"," 'convergence-flag': 1,\n"," 'disagree-score': array([0.94531297, 0.4668276 , 0.01627068, 0.9366884 , 0.03623933,\n","        0.92318725, 0.91967312, 0.92902499, 0.1134287 , 0.94985462]),\n"," 'prob': 0.9836566628800567}"]},"metadata":{"tags":[]},"execution_count":248}]},{"cell_type":"markdown","metadata":{"id":"OoRduHYuzdq4"},"source":[""]}]}